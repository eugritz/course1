//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "cards")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub entry_kind_id: i32,
    pub name: String,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub source_front: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub source_back: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub source_style: Vec<u8>,
    pub immutable: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::entry_kinds::Entity",
        from = "Column::EntryKindId",
        to = "super::entry_kinds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    EntryKinds,
}

impl Related<super::entry_kinds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EntryKinds.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
